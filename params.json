{"name":"Annotatethrift","tagline":"注释java版本的thrift源码","body":"# annotateThrift\r\n\r\n本项目进行thrif源码的注解。\r\n(1)RPC的结构\r\n![rpc结构](http://mindwind.me/assets/article_images/2014-09-22-1.svg)\r\n(摘自 [mindwind.me](http://mindwind.me/blog/2014/09/22/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BARPC%E2%80%94%E2%80%94%E6%B7%B1%E5%85%A5%E7%AF%87.html))\r\n\r\nRPC 服务方通过 RpcServer 去导出（export）远程接口方法，而客户方通过 RpcClient 去引入（import）远程接口方法。 客户方像调用本地方法一样去调用远程接口方法，RPC 框架提供接口的代理实现，实际的调用将委托给代理 RpcProxy 。 代理封装调用信息并将调用转交给 RpcInvoker 去实际执行。 \r\n\r\n在客户端的 RpcInvoker 通过连接器 RpcConnector 去维持与服务端的通道 RpcChannel， 并使用 RpcProtocol 执行协议编码（encode）并将编码后的请求消息通过通道发送给服务方。\r\nRPC 服务端接收器 RpcAcceptor 接收客户端的调用请求，同样使用 RpcProtocol 执行协议解码（decode）。 解码后的调用信息传递给 RpcProcessor 去控制处理调用过程，最后再委托调用给 RpcInvoker 去实际执行并返回调用结果\r\n\r\n# 结构\r\n\r\nthrift 源码的结构如下：\r\n  - meta_data\r\n  - transport\r\n  - protocol\r\n  - server\r\n  - async\r\n  - scheme  \r\n  - ex..\r\n\r\n对应的，thrift结构如下：\r\n  - TProtocol 协议和编解码组件\r\n  - TTransport 传输组件\r\n  - TProcessor 服务调用组件\r\n  - TServer，Client 服务器和客户端组件\r\n  - IDL 服务描述组件，负责生产跨平台客户端\r\n\r\n## meta_data  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}